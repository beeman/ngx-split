{"version":3,"sources":["webpack:///src/app/pages/documentation/documentation.component.ts","webpack:///src/app/pages/documentation/documentation.component.html","webpack:///src/app/pages/documentation/documentation.module.ts"],"names":["DocumentationComponent","splitDoc","inputs","name","type","details","outputs","value","splitAreaDoc","cssClasses","split","area","gutter","templateUrl","styleUrls","DocumentationModule","forChild","path","component","declarations","imports"],"mappings":"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","file":"pages-documentation-documentation-module-es5.js","sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: './documentation.component.html',\n  styleUrls: ['./documentation.component.scss'],\n})\nexport class DocumentationComponent {\n  readonly splitDoc = {\n    inputs: [\n      {\n        name: 'direction',\n        type: 'string',\n        default: '\"horizontal\"',\n        details:\n          'Select split direction: <code>\"horizontal\"</code> or <code>\"vertical\"</code>.',\n      },\n      {\n        name: 'unit',\n        type: 'string',\n        default: '\"percent\"',\n        details: `Selected unit you want to use: <code>\"percent\"</code> or <code>\"pixel\"</code> to specify area sizes.`,\n      },\n      {\n        name: 'gutterSize',\n        type: 'number',\n        default: '11',\n        details: `Gutters's size (dragging elements) in pixels.`,\n      },\n      {\n        name: 'gutterStep',\n        type: 'number',\n        default: '1',\n        details: `Gutter step while moving in pixels.`,\n      },\n      {\n        name: 'restrictMove',\n        type: 'boolean',\n        default: 'false',\n        details:\n          'Set to <code>true</code> if you want to limit gutter move to adjacent areas only.',\n      },\n      {\n        name: 'disabled',\n        type: 'boolean',\n        default: 'false',\n        details:\n          'Disable the dragging feature (remove cursor/image on gutters). <code>(gutterClick)</code>/<code>(gutterDblClick)</code> still emits.',\n      },\n      {\n        name: 'dir',\n        type: 'string',\n        default: '\"ltr\"',\n        details:\n          'Indicates the directionality of the areas: <code>\"ltr\"</code> (left to right) or <code>\"rtl\"</code> (right to left).',\n      },\n      {\n        name: 'useTransition',\n        type: 'boolean',\n        default: 'false',\n        details:\n          'Add transition when toggling visibility using <code>[visible]</code> or <code>[size]</code> changes.<br><u>Warning: Transitions are not working for <a href=\"https://github.com/philipwalton/flexbugs#flexbug-16\">IE/Edge/Safari</a></u>',\n      },\n      {\n        name: 'gutterDblClickDuration',\n        type: 'number',\n        default: '0',\n        details: `Milliseconds to detect a double click on a gutter. Set it around 300-500ms if you want to use <code>(gutterDblClick)</code> event.`,\n      },\n    ],\n    outputs: [\n      {\n        name: 'dragStart',\n        value: '{gutterNum: number, sizes: Array<number>}',\n        details: 'Emit when drag starts.',\n      },\n      {\n        name: 'dragEnd',\n        value: '{gutterNum: number, sizes: Array<number>}',\n        details: 'Emit when drag ends.',\n      },\n      {\n        name: 'gutterClick',\n        value: '{gutterNum: number, sizes: Array<number>}',\n        details:\n          'Emit when user clicks on a gutter. See <code>[gutterDblClickDuration]</code> input.',\n      },\n      {\n        name: 'gutterDblClick',\n        value: '{gutterNum: number, sizes: Array<number>}',\n        details:\n          'Emit when user double clicks on a gutter. See <code>[gutterDblClickDuration]</code> input.',\n      },\n      {\n        name: 'transitionEnd',\n        value: 'Array<number>',\n        details:\n          'Emit when transition ends (could be triggered from <code>[visible]</code> or <code>[size]</code> changes).<br>Only if <code>[useTransition]=\"true\"</code>.<br><u>Warning: Transitions are not working for <a href=\"https://github.com/philipwalton/flexbugs#flexbug-16\">IE/Edge/Safari</a></u>',\n      },\n    ],\n    class: [\n      {\n        name: 'dragProgress$',\n        type: 'Observable<{gutterNum: number, sizes: Array<number>}>',\n        details: `Emit when dragging. Replace old <code>(dragProgress)</code> template event for better flexibility about change detection mechanism.<br><u>Warning: Running outside zone by design, if you need to notify angular add</u> <code>this.splitEl.dragProgress$.subscribe(x => this.ngZone.run(() => this.x = x));</code>`,\n      },\n      {\n        name: 'setVisibleAreaSizes()',\n        type: '(Array<number>) => boolean',\n        details:\n          'Set all <b>visible</b> area sizes in one go, return a boolean to know if input values were correct. Useful when combined with <code>dragProgress$</code> to sync multiple splits.',\n      },\n      {\n        name: 'getVisibleAreaSizes()',\n        type: '() => Array<number>',\n        details: 'Get all <b>visible</b> area sizes.',\n      },\n    ],\n  };\n\n  readonly splitAreaDoc = {\n    inputs: [\n      {\n        name: 'size',\n        type: 'number',\n        default: '-',\n        details: `Size of the area in selected unit (<code>percent</code>/<code>pixel</code>).<br><u>Percent mode:</u> All areas sizes should equal to 100, If not, all areas will have the same size.<br><u>Pixel mode:</u> An area with  wildcard size (<code>[size]=\"'*'\"</code>) is mandatory (only one) and can't have <code>[visible]=\"false\"</code> or <code>minSize</code>/<code>maxSize</code>/<code>lockSize</code> properties.`,\n      },\n      {\n        name: 'minSize',\n        type: 'number',\n        default: 'null',\n        details: `Minimum pixel or percent size, can't be smaller than provided <code>size</code>.<br><u>Not working when <code>[size]=\"'*'\"</code></u>`,\n      },\n      {\n        name: 'maxSize',\n        type: 'number',\n        default: 'null',\n        details: `Maximum pixel or percent size, can't be bigger than provided <code>size</code>.<br><u>Not working when <code>[size]=\"'*'\"</code></u>`,\n      },\n      {\n        name: 'lockSize',\n        type: 'boolean',\n        default: 'false',\n        details: `Lock area size, same as <code>minSize</code> = <code>maxSize</code> = <code>size</code>.<br><u>Not working when <code>[size]=\"'*'\"</code></u>`,\n      },\n      {\n        name: 'visible',\n        type: 'boolean',\n        default: 'true',\n        details: `Hide area visually but still present in the DOM, use <code>ngIf</code> to completely remove it.<br><u>Not working when <code>[size]=\"'*'\"</code></u>`,\n      },\n    ],\n  };\n\n  readonly cssClasses = {\n    split: [\n      { name: 'ngx-init', details: 'Added after component initialization.' },\n      {\n        name: 'ngx-horizontal / ngx-vertical',\n        details: 'Depends on <code>&lt;ngx-split [direction]=\"x\"&gt;</code>.',\n      },\n      {\n        name: 'ngx-disabled',\n        details: 'Added when <code>&lt;ngx-split [disabled]=\"true\"&gt;</code>.',\n      },\n      {\n        name: 'ngx-transition',\n        details:\n          'Added when <code>&lt;ngx-split [useTransition]=\"true\"&gt;</code>.',\n      },\n      { name: 'ngx-dragging', details: 'Added while a gutter is dragged.' },\n    ],\n    area: [\n      { name: 'ngx-split-area', details: 'Added on all areas.' },\n      {\n        name: 'ngx-hidden',\n        details:\n          'Added when <code>&lt;ngx-split-area [visible]=\"false\"&gt;</code>.',\n      },\n    ],\n    gutter: [\n      { name: 'ngx-split-gutter', details: 'Added on all gutters.' },\n      { name: 'ngx-dragged', details: 'Added on gutter while dragged.' },\n    ],\n  };\n}\n","<div class=\"container\">\n  <h4>\n    <b>SplitComponent</b>&nbsp;<span class=\"sel\"\n      >(selector: '<span class=\"selContent\">ngx-split</span>' / exportAs: '<span\n        class=\"selContent\"\n        >ngxSplit</span\n      >')</span\n    >\n  </h4>\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th>@Input()</th>\n        <th>Type</th>\n        <th>Default</th>\n        <th>Details</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let prop of splitDoc.inputs\">\n        <td>{{ prop.name }}</td>\n        <td>{{ prop.type }}</td>\n        <td>\n          <code>{{ prop.default }}</code>\n        </td>\n        <td [innerHTML]=\"prop.details\"></td>\n      </tr>\n    </tbody>\n  </table>\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th>@Output()</th>\n        <th>Value</th>\n        <th>Details</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let event of splitDoc.outputs\">\n        <td>{{ event.name }}</td>\n        <td>\n          <code>{{ event.value }}</code>\n        </td>\n        <td [innerHTML]=\"event.details\"></td>\n      </tr>\n    </tbody>\n  </table>\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th>Access from TS class</th>\n        <th>Type</th>\n        <th>Details</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let item of splitDoc.class\">\n        <td>{{ item.name }}</td>\n        <td>\n          <code>{{ item.type }}</code>\n        </td>\n        <td [innerHTML]=\"item.details\"></td>\n      </tr>\n    </tbody>\n  </table>\n  <br /><br />\n\n  <h4>\n    <b>SplitAreaDirective</b>&nbsp;<span class=\"sel\"\n      >(selector: '<span class=\"selContent\"\n        >ngx-split-area, [ngx-split-area]</span\n      >' / exportAs: '<span class=\"selContent\">ngxSplitArea</span>')</span\n    >\n  </h4>\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th>@Input()</th>\n        <th>Type</th>\n        <th>Default</th>\n        <th>Details</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let prop of splitAreaDoc.inputs\">\n        <td>{{ prop.name }}</td>\n        <td>{{ prop.type }}</td>\n        <td>\n          <code>{{ prop.default }}</code>\n        </td>\n        <td [innerHTML]=\"prop.details\"></td>\n      </tr>\n    </tbody>\n  </table>\n  <br /><br />\n\n  <h4><b>CSS classes</b></h4>\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th style=\"width: 40%;\">Split element classes</th>\n        <th>Details</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let x of cssClasses.split\">\n        <td>\n          <code>{{ x.name }}</code>\n        </td>\n        <td [innerHTML]=\"x.details\"></td>\n      </tr>\n    </tbody>\n  </table>\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th style=\"width: 40%;\">Area element classes</th>\n        <th>Details</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let x of cssClasses.area\">\n        <td>\n          <code>{{ x.name }}</code>\n        </td>\n        <td [innerHTML]=\"x.details\"></td>\n      </tr>\n    </tbody>\n  </table>\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th style=\"width: 40%;\">Gutter element classes</th>\n        <th>Details</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let x of cssClasses.gutter\">\n        <td>\n          <code>{{ x.name }}</code>\n        </td>\n        <td [innerHTML]=\"x.details\"></td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { DocumentationComponent } from './documentation.component';\n\n@NgModule({\n  declarations: [DocumentationComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([{ path: '', component: DocumentationComponent }]),\n  ],\n})\nexport class DocumentationModule {}\n"]}